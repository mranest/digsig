package net.sf.dsig.verify;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.security.cert.CertificateFactory;
import java.security.cert.TrustAnchor;
import java.security.cert.X509Certificate;
import java.util.HashSet;
import java.util.Set;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import junit.framework.TestCase;

import org.apache.xml.security.signature.ObjectContainer;
import org.apache.xml.security.utils.Base64;
import org.w3c.dom.Element;

public class XmldsigVerifierTest extends TestCase {

	/*
	public void testVerify() throws Exception {
		XmldsigVerifier v = new XmldsigVerifier();
		v.setCrlHelper(X509CRLHelperTest.getCrlHelper());
		v.setOcspHelper(OCSPHelperTest.getOcspHelper());

		try {
			v.isValid();
			fail("Unsupported operation exception not raised");
		} catch (UnsupportedOperationException ignored) {
		}

		v.initEnvelopingSignature(getClass().getResourceAsStream(
				"/sample-xmldsig.xml"));

		CertificateFactory cf = CertificateFactory.getInstance("X.509");
		X509Certificate certificate = (X509Certificate) cf
				.generateCertificate(getClass()
						.getResourceAsStream("/root.cer"));
		TrustAnchor ta = new TrustAnchor(certificate, null);
		Set trustAnchors = new HashSet();
		trustAnchors.add(ta);

		v.setTrustAnchors(trustAnchors);

		// No exceptions expected
		assertTrue(v.isCertificatePathValid());
		assertTrue(v.isValid());

		assertTrue(v.verify());
	}
	*/

	private String utf8Signature = "";
	
	public void testUSignature() throws Exception {
		InputStream is = new ByteArrayInputStream(Base64.decode(utf8Signature.getBytes()));
		XmldsigVerifier v = new XmldsigVerifier();
		v.setCrlHelper(X509CRLHelperTest.getCrlHelper());
		v.setOcspHelper(OCSPHelperTest.getOcspHelper());

		v.initEnvelopingSignature(is);
		
		ObjectContainer[] objectContainers = v.getObjectContainers();
		for (int i=0; i<objectContainers.length; i++) {
			ObjectContainer each = objectContainers[i];
			Element element = each.getElement();
			Transformer transformer = TransformerFactory.newInstance().newTransformer();
			transformer.transform(new DOMSource(element), new StreamResult(System.out));
			System.out.println();
		}
		
		CertificateFactory cf = CertificateFactory.getInstance("X.509");
		X509Certificate certificate = (X509Certificate) cf
				.generateCertificate(getClass()
						.getResourceAsStream("/root.cer"));
		TrustAnchor ta = new TrustAnchor(certificate, null);
		Set trustAnchors = new HashSet();
		trustAnchors.add(ta);

		v.setTrustAnchors(trustAnchors);

		assertTrue(v.isCertificatePathValid());
		assertTrue(v.isValid());

		assertTrue(v.verify());
	}

}
