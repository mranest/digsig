package net.sf.dsig.verify;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.security.cert.CertificateFactory;
import java.security.cert.TrustAnchor;
import java.security.cert.X509Certificate;
import java.util.HashSet;
import java.util.Set;

import junit.framework.TestCase;

import org.apache.xml.security.utils.Base64;

public class XmldsigVerifierTest extends TestCase {

	public void testVerify() throws Exception {
		XmldsigVerifier v = new XmldsigVerifier();
		v.setCrlHelper(X509CRLHelperTest.getCrlHelper());
		v.setOcspHelper(OCSPHelperTest.getOcspHelper());

		try {
			v.isValid();
			fail("Unsupported operation exception not raised");
		} catch (UnsupportedOperationException ignored) {
		}

		v.initEnvelopingSignature(getClass().getResourceAsStream(
				"/sample-xmldsig.xml"));

		CertificateFactory cf = CertificateFactory.getInstance("X.509");
		X509Certificate certificate = (X509Certificate) cf
				.generateCertificate(getClass()
						.getResourceAsStream("/root.cer"));
		TrustAnchor ta = new TrustAnchor(certificate, null);
		Set trustAnchors = new HashSet();
		trustAnchors.add(ta);

		v.setTrustAnchors(trustAnchors);

		// No exceptions expected
		assertTrue(v.isCertificatePathValid());
		assertTrue(v.isValid());

		assertTrue(v.verify());
	}

	private String utf8Signature = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PFNpZ25hdHVyZSB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+PFNpZ25lZEluZm8+PENhbm9uaWNhbGl6YXRpb25NZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz48U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3JzYS1zaGExIi8+PFJlZmVyZW5jZSBVUkk9IiNmb3JtRGF0YSI+PFRyYW5zZm9ybXM+PFRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjwvVHJhbnNmb3Jtcz48RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3NoYTEiLz48RGlnZXN0VmFsdWU+U2lTNGorOWU5ckVIOHhSaDBCT09oeDlCQ2g0PTwvRGlnZXN0VmFsdWU+PC9SZWZlcmVuY2U+PC9TaWduZWRJbmZvPjxTaWduYXR1cmVWYWx1ZT54V2d5Nk94QUFwdzNMOGVhYkd6OHQ5RUZRTEpocXVlV1VxN3RWYVJzalowa2hkbi93WjdFSnZKVnluWUh1OTR2aXoxM2ZlS3c2Z2t5DQpaU2lJMHd2c21qMEovMUFTd0RJUTdSVll5T2k2ZC9maXpxd1BHalpYSGNocDFrcGhSdlFrVU1UUDlYS0grZjFFOGdyUDd4TTdtOEhqDQp4c3hFbjIxOEhMSlR1YVF0NjEwPTwvU2lnbmF0dXJlVmFsdWU+PEtleUluZm8+PFg1MDlEYXRhPjxYNTA5Q2VydGlmaWNhdGU+TUlJRFhqQ0NBc3VnQXdJQkFnSVFvOUdjOE9kY3ZxcE9leHZnMmxtaWpqQUpCZ1VyRGdNQ0hRVUFNSUdMTVNzd0tRWURWUVFMRXlKRA0KY21WaGRHVmtJR0o1SUdoMGRIQTZMeTkzZDNjdVptbGtaR3hsY2pJdVkyOXRNU0V3SHdZRFZRUUtIaGdBUkFCUEFGOEFUZ0JQQUZRQQ0KWHdCVUFGSUFWUUJUQUZReE9UQTNCZ05WQkFNZU1BQkVBRThBWHdCT0FFOEFWQUJmQUZRQVVnQlZBRk1BVkFCZkFFWUFhUUJrQUdRQQ0KYkFCbEFISUFVZ0J2QUc4QWREQWVGdzB3T1RBME1UTXhNVEV6TWpOYUZ3MHpPVEV5TXpFeU16VTVOVGxhTUdzeEt6QXBCZ05WQkFzVA0KSWtOeVpXRjBaV1FnWW5rZ2FIUjBjRG92TDNkM2R5NW1hV1JrYkdWeU1pNWpiMjB4SVRBZkJnTlZCQW9lR0FCRUFFOEFYd0JPQUU4QQ0KVkFCZkFGUUFVZ0JWQUZNQVZERVpNQmNHQTFVRUF4TVFaQzVuWlhSa2NtOXdZbTk0TG1OdmJUQ0JuekFOQmdrcWhraUc5dzBCQVFFRg0KQUFPQmpRQXdnWWtDZ1lFQTMxSDFaZXB6RkZXbHJHSnE0RTZpeFRIZ3dYdWwxUzVUNEpScDNMOXVRMmRiMDEvZ1k3bVovYStJZTFTcw0KZDZSNG5XOHlBVFlJYVdGUXlFMC9jRjdvODJxaXdsTnByUjdtb2NzSWtYcExQc3I0cldSTGVCK1I0elU2djR6c1ZQVnpVZGFCUG5rcg0KZDI4MWhvL0c0M0ZLM3JnSmdxUmZ0NHR3SXlwUDRlVWx4QTBDQXdFQUFhT0I2VENCNWpBTUJnTlZIUk1CQWY4RUFqQUFNQk1HQTFVZA0KSlFRTU1Bb0dDQ3NHQVFVRkJ3TUJNSUhBQmdOVkhRRUVnYmd3Z2JXQUVINWYvdnpYNlcyZCs1ZDYwUTlBUldPaGdZNHdnWXN4S3pBcA0KQmdOVkJBc1RJa055WldGMFpXUWdZbmtnYUhSMGNEb3ZMM2QzZHk1bWFXUmtiR1Z5TWk1amIyMHhJVEFmQmdOVkJBb2VHQUJFQUU4QQ0KWHdCT0FFOEFWQUJmQUZRQVVnQlZBRk1BVkRFNU1EY0dBMVVFQXg0d0FFUUFUd0JmQUU0QVR3QlVBRjhBVkFCU0FGVUFVd0JVQUY4QQ0KUmdCcEFHUUFaQUJzQUdVQWNnQlNBRzhBYndCMGdoRElPbVRHM2puS3JVVlUvTmJqbkxhNU1Ba0dCU3NPQXdJZEJRQURnWUVBa0hNNw0KT252V1VlS0FyUG1hS1ljaWZ3WThsY3B1dnJzK2FwS3VCeTVzbkF6ekc2YS82STJkMUhVRFIvN2VHWEUzWHA3STduRGhiZXRsV0pROA0KZ0tGbi9LK1U5cFBtVkptSlRrRG5GR3BRQldnWW4yekRqYkpCZ0ErRXZSWFFJUEpsVjNES2RXZjJ2OVpUNmZaU09SanZVazFLZStLOA0KOHhIOHY3dDc2VHVjaDBjPTwvWDUwOUNlcnRpZmljYXRlPjxYNTA5Q2VydGlmaWNhdGU+TUlJRGdqQ0NBdStnQXdJQkFnSVF5RHBreHQ0NXlxMUZWUHpXNDV5MnVUQUpCZ1VyRGdNQ0hRVUFNSUdMTVNzd0tRWURWUVFMRXlKRA0KY21WaGRHVmtJR0o1SUdoMGRIQTZMeTkzZDNjdVptbGtaR3hsY2pJdVkyOXRNU0V3SHdZRFZRUUtIaGdBUkFCUEFGOEFUZ0JQQUZRQQ0KWHdCVUFGSUFWUUJUQUZReE9UQTNCZ05WQkFNZU1BQkVBRThBWHdCT0FFOEFWQUJmQUZRQVVnQlZBRk1BVkFCZkFFWUFhUUJrQUdRQQ0KYkFCbEFISUFVZ0J2QUc4QWREQWVGdzB3T1RBME1UTXhNVEV5TlRGYUZ3MHpPVEV5TXpFeU16VTVOVGxhTUlHTE1Tc3dLUVlEVlFRTA0KRXlKRGNtVmhkR1ZrSUdKNUlHaDBkSEE2THk5M2QzY3VabWxrWkd4bGNqSXVZMjl0TVNFd0h3WURWUVFLSGhnQVJBQlBBRjhBVGdCUA0KQUZRQVh3QlVBRklBVlFCVEFGUXhPVEEzQmdOVkJBTWVNQUJFQUU4QVh3Qk9BRThBVkFCZkFGUUFVZ0JWQUZNQVZBQmZBRVlBYVFCaw0KQUdRQWJBQmxBSElBVWdCdkFHOEFkRENCbnpBTkJna3Foa2lHOXcwQkFRRUZBQU9CalFBd2dZa0NnWUVBMjRwckltanBmSlpmZVdDUw0KY205VHJHYVhhQ2ozM2Z2SFF2Wm1FOEttMklGUVdRR3UxVndTOXNjNlZ6UCtxRURWR3N2U0p1WVVEcFNuc3cyWCtMVngxbEZvbHpwYQ0KTlhtMjJydHRWMnB3eXpmUG5YSTVkeXo4cHUyUmsvUGNIM0VpVEI0bGRCT1YwR1M1YnIrUkRjUkhGQm1LcHhKeGJvSHhBK3JRd3J6UQ0KcHhrQ0F3RUFBYU9CN0RDQjZUQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01CTUdBMVVkSlFRTU1Bb0dDQ3NHQVFVRkJ3TUJNSUhBQmdOVg0KSFFFRWdiZ3dnYldBRUg1Zi92elg2VzJkKzVkNjBROUFSV09oZ1k0d2dZc3hLekFwQmdOVkJBc1RJa055WldGMFpXUWdZbmtnYUhSMA0KY0RvdkwzZDNkeTVtYVdSa2JHVnlNaTVqYjIweElUQWZCZ05WQkFvZUdBQkVBRThBWHdCT0FFOEFWQUJmQUZRQVVnQlZBRk1BVkRFNQ0KTURjR0ExVUVBeDR3QUVRQVR3QmZBRTRBVHdCVUFGOEFWQUJTQUZVQVV3QlVBRjhBUmdCcEFHUUFaQUJzQUdVQWNnQlNBRzhBYndCMA0KZ2hESU9tVEczam5LclVWVS9OYmpuTGE1TUFrR0JTc09Bd0lkQlFBRGdZRUFOZWlTeGZVdjMwZ2c5ZUtMS2FhOTZUa1AwaWRxZzJjYw0KZkcwU2FLaXFhbUxFTE1ybW9lYXBkRUdwMi9sekN0SjB5RmFFUFlMVDI2K1lrMU1GSlRISTE5ekFNODhiOENTYjFUUExqT2t3S213TQ0KcGFGa0FvQzhoaWRDMFp3L3ByM0l4Vnd4c1NQZkVScWd5V3lvdG5wVnRuRnY3N1ZycGZQa1BJSVdEb2R1Q1NjPTwvWDUwOUNlcnRpZmljYXRlPjwvWDUwOURhdGE+PC9LZXlJbmZvPjxPYmplY3QgRW5jb2Rpbmc9IlVURi04IiBJZD0iZm9ybURhdGEiPjxmb3JtIGlkPSJmb3JtMSIgbmFtZT0iZm9ybTEiPjxzZWxlY3QgbXVsdGlwbGU9ImZhbHNlIiBuYW1lPSJhY2NvdW50Ij48b3B0aW9uIHNlbGVjdGVkPSJ0cnVlIiB2YWx1ZT0iMTIzNDU2Nzg5MCI+U2F2aW5nczogMTIzNDU2Nzg5MDwvb3B0aW9uPjwvc2VsZWN0PjxpbnB1dCBuYW1lPSJhbW91bnQiIHR5cGU9InRleHQiIHZhbHVlPSLOlc6bzpvOl86dzpnOms6fzqMiLz48aW5wdXQgY2hlY2tlZD0idHJ1ZSIgbmFtZT0iY2hlY2siIHR5cGU9ImNoZWNrYm94IiB2YWx1ZT0iMiIvPjxpbnB1dCBjaGVja2VkPSJ0cnVlIiBuYW1lPSJjaGVjayIgdHlwZT0iY2hlY2tib3giIHZhbHVlPSIzIi8+PC9mb3JtPjwvT2JqZWN0PjwvU2lnbmF0dXJlPg==";
	
	public void testUSignature() throws Exception {
		System.out.println(utf8Signature);
		
		InputStream is = new ByteArrayInputStream(Base64.decode(utf8Signature.getBytes()));
		XmldsigVerifier v = new XmldsigVerifier();
		v.initEnvelopingSignature(is);
		
		assertTrue(v.isValid());
	}

}
